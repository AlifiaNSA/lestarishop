--- a/admin/src/pages/Orders.jsx
+++ b/admin/src/pages/Orders.jsx
@@ -1,6 +1,7 @@
 import React from 'react'
 import { useState } from 'react'
 import { backend_url } from '../App'
 import axios from 'axios'
 import { useEffect } from 'react'
 import { toast } from 'react-toastify'
 import { TfiPackage } from 'react-icons/tfi'
+import * as XLSX from 'xlsx'
@@ -50,6 +51,44 @@
   useEffect(() => {
     fetchAllOrders()
   }, [token])
+
+  // Export orders to Excel
+  const exportToExcel = () => {
+    if (orders.length === 0) {
+      toast.info('No orders to export')
+      return
+    }
+    // Prepare data for Excel
+    const data = orders.map(order => ({
+      'Order ID': order._id,
+      'Items': order.items.map(item => `${item.name} x${item.quantity} (${item.size})`).join(', '),
+      'Recipient': order.address.firstName + ' ' + order.address.lastName,
+      'Address': `${order.address.street}, ${order.address.city}, ${order.address.state}, ${order.address.country}, ${order.address.zipcode}`,
+      'Phone': order.address.phone,
+      'Total Items': order.items.length,
+      'Payment Method': order.paymentMethod,
+      'Payment Status': order.payment ? 'Done' : 'Pending',
+      'Date': new Date(order.date).toLocaleDateString(),
+      'User': order.userAccount && order.userAccount.username ? order.userAccount.username : (order.userAccount && order.userAccount.name ? order.userAccount.name : 'Unknown'),
+      'Status': order.status,
+      'Amount (IDR)': order.amount
+    }))
+
+    // Create worksheet and workbook
+    const worksheet = XLSX.utils.json_to_sheet(data)
+    const workbook = XLSX.utils.book_new()
+    XLSX.utils.book_append_sheet(workbook, worksheet, 'Orders')
+
+    // Generate buffer
+    const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' })
+
+    // Create blob and download
+    const blob = new Blob([excelBuffer], { type: 'application/octet-stream' })
+    const url = window.URL.createObjectURL(blob)
+    const a = document.createElement('a')
+    a.href = url
+    a.download = `orders_report_${new Date().toISOString().slice(0,10)}.xlsx`
+    a.click()
+    window.URL.revokeObjectURL(url)
+  }
@@ -60,7 +97,9 @@
       <div className='mb-6 p-4 bg-white rounded-lg shadow'>
-        <h2 className='text-xl font-semibold mb-2'>Sales Report</h2>
-        <p className='text-lg'>Total Sales: {formatRupiah(totalSales)}</p>
-        <p className='text-lg'>Total Orders: {totalOrders}</p>
+        <div className='flex justify-between items-center'>
+          <div>
+            <h2 className='text-xl font-semibold mb-2'>Sales Report</h2>
+            <p className='text-lg'>Total Sales: {formatRupiah(totalSales)}</p>
+            <p className='text-lg'>Total Orders: {totalOrders}</p>
+          </div>
+          <button onClick={exportToExcel} className='btn-primary px-4 py-2 rounded'>
+            Export to Excel
+          </button>
+        </div>
       </div>
